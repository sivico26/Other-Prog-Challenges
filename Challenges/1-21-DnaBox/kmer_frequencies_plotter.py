import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def idx2kmer(idx, k):
    coded_nucs_eqv = {0:"A", 1:"C", 2:"G", 3:"T"}
    coded_nucs = []
    
    while idx > 0:
        coded_nucs.append(idx % 4)
        idx //= 4
    
    return "A"*(k - len(coded_nucs)) + "".join(coded_nucs_eqv.get(nuc) for nuc in coded_nucs[::-1])
        

# Read the results file generated by Rust.
mat = np.fromfile("tot_result.tsv", sep="\t", dtype = np.dtype(int))

# Reshape the dataset to the number of columns (66 seqs) 
# and rows (kmers + 1)
mat = mat.reshape(((4**9 + 1 ), 66))

# Reset the last row (See README)
mat[-1,:] = 0

## Determine the most frequente Kmer
most_frequent_idx = mat.sum(axis=1).argmax()
max_freq = mat.sum(axis=1).max()
most_frequent_kmer = idx2kmer(most_frequent_idx, 9)

print(f"The most frequent kmer is {most_frequent_kmer} with {max_freq} ocurrences")

## Finally we plot 
sns.histplot(mat.sum(axis=1))
plt.xlabel("Kmer frequencies")
plt.savefig("frequencies.png")